Specification: 
		OS: unix (UBUNTU 16.04)
		Intel/amd processor i5 or greater
		GPU : NVIDIA GTX 1050 or above


Installation for using the trained model

Installation of OpenCV DNN module on NVIDIA GPU - CUDA and CuDNN
(Reference - pyimagesearch)

Step #1: Install NVIDIA CUDA drivers, CUDA Toolkit, and cuDNN

	follow this guide to install CUDA drivers and CuDNN module:
	https://www.pyimagesearch.com/2017/09/27/setting-up-ubuntu-16-04-cuda-gpu-for-deep-learning-with-python/
	
	
Step #2: Install OpenCV and “dnn” GPU dependencies
	
	$ sudo apt-get update
	$ sudo apt-get upgrade
	$ sudo apt-get install build-essential cmake unzip pkg-config
	$ sudo apt-get install libjpeg-dev libpng-dev libtiff-dev
	$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev
	$ sudo apt-get install libv4l-dev libxvidcore-dev libx264-dev
	$ sudo apt-get install libgtk-3-dev
	$ sudo apt-get install libatlas-base-dev gfortran
	$ sudo apt-get install python3-dev
	
Step #2: Install OpenCV and “dnn” GPU dependencies
	
	$ cd ~
	$ wget -O opencv.zip https://github.com/opencv/opencv/archive/4.2.0.zip
	$ wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.2.0.zip
	$ unzip opencv.zip
	$ unzip opencv_contrib.zip
	$ mv opencv-4.2.0 opencv
	$ mv opencv_contrib-4.2.0 opencv_contrib

Step #4: Configure Python virtual environment

	$ wget https://bootstrap.pypa.io/get-pip.py
	$ sudo python3 get-pip.py
	
	install both virtualenv and virtualenvwrapper
	$ sudo pip install virtualenv virtualenvwrapper
	$ sudo rm -rf ~/get-pip.py ~/.cache/pip
	
	create and activate a new python environment:
	
	$ mkvirtualenv opencv_cuda -p python3
	
	Install all the required packages:
		pip install -r requirements.txt

Step #5: Determine your CUDA architecture version
	

Step #6: Configure OpenCV with NVIDIA GPU support
	
	$ workon opencv_cuda
	$ cd ~/opencv
	$ mkdir build
	$ cd build
	
	You can then run the following cmake command, making sure you set the CUDA_ARCH_BIN variable based on your NVIDIA GPU architecture version, which you found in the previous section:
How to use OpenCV's 'dnn' module with NVIDIA GPUs, CUDA, and cuDNN

	$ cmake -D CMAKE_BUILD_TYPE=RELEASE \
		-D CMAKE_INSTALL_PREFIX=/usr/local \
		-D INSTALL_PYTHON_EXAMPLES=ON \
		-D INSTALL_C_EXAMPLES=OFF \
		-D OPENCV_ENABLE_NONFREE=ON \
		-D WITH_CUDA=ON \
		-D WITH_CUDNN=ON \
		-D OPENCV_DNN_CUDA=ON \
		-D ENABLE_FAST_MATH=1 \
		-D CUDA_FAST_MATH=1 \
		-D CUDA_ARCH_BIN=7.0 \
		-D WITH_CUBLAS=1 \
		-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \
		-D HAVE_opencv_python3=ON \
		-D PYTHON_EXECUTABLE=~/.virtualenvs/opencv_cuda/bin/python \
		-D BUILD_EXAMPLES=ON ..
	
	

Step #7: Compile OpenCV with “dnn” GPU support

	$ make -j8
	// -change j8 depending upon no of cpu cores
	

Step #8: Install OpenCV with “dnn” GPU support
	$ sudo make install
	$ sudo ldconfig
	
	
follow this guide for further detail: https://www.pyimagesearch.com/2020/02/03/how-to-use-opencvs-dnn-module-with-nvidia-gpus-cuda-and-cudnn/



now the Environment is ready and can run the python detection file:
	navigate to the 
